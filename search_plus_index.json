{"./":{"url":"./","title":"Introduction","keywords":"","body":"SUMMARY "},"审批流引擎/1-业务场景.html":{"url":"审批流引擎/1-业务场景.html","title":"业务场景","keywords":"","body":"简单场景 生活的简单请假场景，申请人写一份请假单，拿请假单到L1审批，同意之后拿去L2 审批直到整个审批流结束 涉及到的概念，申请人，申请内容，审批人，审批内容，申请单，审批单... 复杂场景 1 流程的分类 针对抽象的审批流程，制定各种审批流程对应不同的事件，比如请假流程，报销流程 2 多节点模式 start->node1->node2->...noden->end 3 多审批模式 单人审批，多人审批（一人同意视作节点同意，一人拒绝视作流程结束），会签审批（全部同意节点同意，一人拒绝审批结束） 4 后台设定配置，配置解析 5 流程结束之后绑定的相关业务处理 6 流程入口条件过滤，审批节点条件过滤 7 自定义审批人特性流程处理 8 模型变动自动触发 9 多配置优先级 叠加业务 1 交互，是否触发审批，分支流程 2 自定义审批人 填写，提交 3 多端数据兼容及历史版本兼容 4 历史数据迁移及配置迁移，异常配置处理 5 主动提交+自动触发 6 流程独立，防止其他流程干扰或者干扰其他流程 7 全局开关配置，只接受来自应用层的请求 业务需求 1 可自定义配置 2 兼容旧版审批流程 3 主动提交，自动触发 4 结束后操作，唤醒，发件，消息通知，字段更新 "},"审批流引擎/2-领域模型抽象.html":{"url":"审批流引擎/2-领域模型抽象.html","title":"领域模型抽象","keywords":"","body":"领域模型 申请人 聚合申请单 操作对象申请单 事件归属 审批人 聚合审批单 操作对象审批单 事件归属 申请单 申请内容 申请人 绑定diff context上下文 来源 触发事件 业务模型类型及关联id 关联的审批配置 申请单状态 审批单 归属审批人 关联申请单 审批节点 审批状态 审批事件 记录审批流程中的事件，渲染审批日志，流程中审批内容变更 审批节点 聚合审批单 归属申请单 构建审批流程图示 "},"审批流引擎/3-整体流程.html":{"url":"审批流引擎/3-整体流程.html","title":"整体流程","keywords":"","body":"流程图示 1 审批引擎 采用php特性引入业务底层领域模型 2 在beforeSave afterSave 或者 调度的行为中埋点 产生审批信号，分为触发类型和中断类型 3 审批流引擎调度器，检查当前环境，初始化常量，接受信号量移交适配器，处理异常交互 4 适配器根据信号量关联的业务模型类型权重过滤出适配的配置 5 过滤器根据信号量和配置设置的流程条件和步骤条件进行筛选，现阶段采用的是组装sql依赖数据库的能力进程筛选 6 返回合适审批配置和步骤条件，根据信号量移交给审批流执行器，执行器生成申请单，调度审批节点调度器生成节点和审批单 7 申请单 审批单 审批节点就绪之后等待用户审批事件，转交同意拒绝撤回系统停止等事件 8 节点结束由驱动器检查是否是否有下一个适配的步骤，有的话继续调用节点调度器生成节点和审批单，没有则转移到结束状态 9 结束状态，是否需要执行唤醒worker，流程配置的结束态的处理句柄 10 中间事件记录，事件发布监听 "},"审批流引擎/4-适配器.html":{"url":"审批流引擎/4-适配器.html","title":"适配器","keywords":"","body":"适配器 有多种类型的审批流配置，根据当前的信号关联的业务模型，触发类型适配出合适的配置 1 信号业务类型 2 信号触发事件 3 权重，配置状态 4 审批中的是否需要适配当前已经适配的配置 "},"审批流引擎/5-过滤器.html":{"url":"审批流引擎/5-过滤器.html","title":"过滤器","keywords":"","body":"过滤器 sql策略 1 条件 fieldValue oprate targetValue 2 条件逻辑 （1 AND 2 ( 3 OR 4 ) ） 3 特殊操作符，属于，包含需要特殊处理 4 依赖底层数据库能力，将条件转化为where 比如user_id=123 money>100 或者0=1否定where 5 将逻辑转为where (user_id=1 AND money=100) 优化后的逻辑采用内存过滤，实现内存比较器和逻辑运算器 当时鉴于开发成本和测试成本采用了sql过滤器 缺点: 1 原始模型需要优先持久化下来采用依赖数据库 2 为了维持链路的完整性，明显的终止也需要数据库查询并返回 3 增加数据库压力，单元测试不好处理 内存策略 1 实现各种通用比较器 2 实现逻辑运算符，注意安全性 "},"审批流引擎/6-事件发布及订阅.html":{"url":"审批流引擎/6-事件发布及订阅.html","title":"事件发布及订阅","keywords":"","body":"事件 1 产生事件 2 发布器轮询已注册的关注者 3 关注者执行handle 优点: 1 解耦业务逻辑 2 代码清晰，比如版本号关注者只关注拒绝同意事件 3 持久化，可由事件生成日志等操作 缺点: 1 类似惊群效应，一个事件会触发多个关注者，轮询一遍是否处理。可以优化，事件发布器注册阶段就设置好事件需要通知的关注者 2 逻辑断层，确定事件发布之后的逻辑分散 "},"审批流引擎/7-总结.html":{"url":"审批流引擎/7-总结.html","title":"总结","keywords":"","body":"事务 前期事务逻辑在模型中导致有可能事务嵌套事务 优化: 事务是应用层调度的问题，应该前置到应用层或者放到服务层 冗余 审批单和申请单关联的基础数据一致，表结构字段冗余不够好，导致后续的查询需要相互依赖 优化:字段冗余要恰到好处，前期没考虑到后续需要补充 存在的问题及优化 1 长链路，无法有效的单元测试，测试成本比较高 2 事件的抽象粒度不够，导致后续的很多需求更变无法实现 3 运行流程基本已经优化，细节可以继续处理，使得运行流程可以阶段式处理 4 延迟的配置校验导致无法在未结束状态预览整个审批流程 5 事件发布导致的惊群和逻辑分散 6 底层的异常无法有效的冒泡到应用层，导致交互方案不够优雅 7 埋点不统一，需要依赖底层模型的整体优化 8 内存过滤策略取代数据库 9 初始化配置独立，适配多端的不同需求 "}}